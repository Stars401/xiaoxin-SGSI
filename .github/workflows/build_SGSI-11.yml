name: build_SGSI-11

on: 
  watch: 
    types: [started]
  
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Get the source code of this repositorie...
        uses: actions/checkout@main
       
      - name: Clean up the environment‌‌...
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo -E apt-get update
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          
      - name: Get variables
        run: |
           echo -e "\033[33m 线程数: $(nproc) \033[0m"
           echo "::set-output name=rom_url::$(jq -r '.rom_url' sgsi.json)"
           echo "::set-output name=rom_name::$(jq -r '.rom_name' sgsi.json)"
           echo "::set-output name=pack_sgsi::$(jq -r '.pack_sgsi' sgsi.json)"
           echo "::set-output name=make_type::$(jq -r '.make_type' sgsi.json)"
           echo "::set-output name=rom_type::$(jq -r '.rom_type' sgsi.json)"
           echo "::set-output name=light_fix::$(jq -r '.light_fix' sgsi.json)"
           echo "::set-output name=bug_fix::$(jq -r '.bug_fix' sgsi.json)"
           echo "::set-output name=version::$(jq -r '.version' sgsi.json)"
           echo "::set-output name=upload_transfer::$(jq -r '.upload_transfer' sgsi.json)"
           echo "::set-output name=upload_release::$(jq -r '.upload_release' sgsi.json)"
           echo "::set-output name=use_7zip::$(jq -r '.use_7zip' sgsi.json)"
           echo "::set-output name=use_zip::$(jq -r '.use_zip' sgsi.json)"           
           
        id: var
         
      - name: Setting Up
        run: |
            #sudo apt update && sudo apt upgrade -y
            sudo apt-get install -y git wget git zip unzip curl axel
            df -h
           
      - name: Download SGSI-build-tool
        run: |
          git clone --recurse-submodules https://github.com/xiaoxindada/SGSI-build-tool.git -b 11 $GITHUB_WORKSPACE/Tool-SGSI-build
          
      - name: Initialization environment
        run: |
           sudo sed -i 's/USE_MIRROR_FOR_PIP\=true/USE_MIRROR_FOR_PIP\=false/' $GITHUB_WORKSPACE/Tool-SGSI-build/setup.sh
           sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/setup.sh
           sudo apt-get -y --purge remove "adoptopenjdk-11-hotspot"
           java -version
           
      - name: Download Rom
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          mkdir ./tmp
          wget -U "Mozilla/5.0" ${{ github.event.inputs.ROM_URL }} -O "$GITHUB_WORKSPACE/Tool-SGSI-build/tmp/${{ github.event.inputs.ZIP_NAME }}"
          echo "zip_file: $(ls "$GITHUB_WORKSPACE/Tool-SGSI-build/tmp/")"
             
      - name: Building AB SGSI
        if: steps.var.outputs.make_type == 'AB' || steps.var.outputs.make_type == 'ab'
        run: |
            sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/make.sh AB << EOF
            ${{ github.event.inputs.ZIP_NAME }}
            y
            y
            ${{ github.event.inputs.OS_TYPE }}
            y
            
      - name: Packing(AB)...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'AB' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          pwd
          zip -r AB_${{ github.event.inputs.REPACK_NAME }} SGSI/*
          ls "AB_${{ github.event.inputs.REPACK_NAME }}"
          echo "--------------------------------------"
          ls
          echo "--------------------------------------"
          mkdir upload_ab
          echo "--------------------------------------"
          ls upload_ab
          echo "--------------------------------------"
          if [ $(ls -l AB_${{ github.event.inputs.REPACK_NAME }} | awk '{print $5}') -gt 2147483647 ]; then tar cvzpf - AB_${{ github.event.inputs.REPACK_NAME }} | split -d -b 1024m - upload_ab/AB_${{ github.event.inputs.REPACK_NAME }}; else mv AB_${{ github.event.inputs.REPACK_NAME }} upload_ab/AB_${{ github.event.inputs.REPACK_NAME }}; fi
          echo "--------------------------------------"
          ls upload_ab
          echo "--------------------------------------"

            
      - name: Building A-only SGSI
        if: steps.var.outputs.make_type == 'A' || steps.var.outputs.make_type == 'a'
        run: |
            sudo bash $GITHUB_WORKSPACE/Tool-SGSI-build/make.sh A << EOF
            ${{ github.event.inputs.ZIP_NAME }}
            y
            y
            ${{ github.event.inputs.OS_TYPE }}
            y
            
      - name: Packing(A-only)...
        if: ${{ github.event.inputs.SGSI_TYPE }} == 'A' || ${{ github.event.inputs.SGSI_TYPE }} == 'BOTH'
        run: |
          cd $GITHUB_WORKSPACE/Tool-SGSI-build
          pwd
          zip -r AONLY_${{ github.event.inputs.REPACK_NAME }} SGSI/*
          ls "AONLY_${{ github.event.inputs.REPACK_NAME }}"
          echo "--------------------------------------"
          ls
          echo "--------------------------------------"
          mkdir upload_aonly
          echo "--------------------------------------"
          ls upload_aonly
          echo "--------------------------------------"
          if [ $(ls -l AONLY_${{ github.event.inputs.REPACK_NAME }} | awk '{print $5}') -gt 2147483647 ]; then tar cvzpf - AONLY_${{ github.event.inputs.REPACK_NAME }} | split -d -b 1024m - upload_aonly/AONLY_${{ github.event.inputs.REPACK_NAME }}; else mv AONLY_${{ github.event.inputs.REPACK_NAME }} upload_aonly/AONLY_${{ github.event.inputs.REPACK_NAME }}; fi
          echo "--------------------------------------"
          ls upload_aonly
          echo "--------------------------------------"

      - name: Upload to Release‌‌...
        uses: ncipollo/release-action@v1.8.0
        with:
          artifacts: "${{ github.workspace }}/Tool-SGSI-build/upload_ab/*,${{ github.workspace }}/Tool-SGSI-build/upload_aonly/*"
          tag: "${{ github.event.inputs.REPACK_NAME }}_${{ env.BUILD_TIME }}"
          bodyFile: "${{ github.workspace }}/Tool-SGSI-build/SGSI/build_info.txt"
          token: ${{ secrets.GITHUB_TOKEN }}
